<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="errorscenarios-in-munit-test-suite.xml" />
	<munit:test name="getproductbyid-idisstring" doc:id="2fa16497-04a1-433b-9707-df32edd2c5d9" description="Test">
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="9c48e2cc-ac8b-4a26-afeb-9108af9fbeea" >
				<munit:attributes value="#[{queryParams:{id: 'ABCD'}}]" />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to mainflow" doc:id="22a56dee-a915-4285-bcd6-f36ec3f088c5" name="mainflow"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression" doc:id="dc5382cb-206e-43ca-9af2-7ff56772b9b1" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must equalTo({
	"status": 400,
	"message":"id must be a number"
})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getproductbyid-dbconnectivity" doc:id="43d685b8-6158-4d2d-9376-9b28e9385505" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="46b75b07-5b40-43df-a9b9-07a394a9d433" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Selectbyid" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="DB:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="e03772c4-754e-4553-a851-57812da702f0">
				<munit:attributes value="#[{queryParams:{id: 1}}]" />
			</munit:set-event>
		</munit:execution>
		<munit:validation >
			<flow-ref doc:name="Flow Reference to mainflow" doc:id="37f85f59-68df-4a54-b81a-f050fe3a40b0" name="mainflow"/>
			<munit-tools:assert doc:name="Assert expression" doc:id="ac8bcd81-0af9-4a64-a3c6-2b8240f55bb6" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must equalTo({
	"status": 500,
	"message": "unable to connect to db"
})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="errorscenarios-in-munit-test-suite-mainflowTest" doc:id="ad63d664-b9a2-4a78-a5a7-97c6ae872ab4" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="e5806260-6144-4335-bcc3-9d52122367c0" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Selectbyid" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="MULE:ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="625b126c-527d-43f4-af96-b181014a9e36" >
				<munit:attributes value="#[{queryParams:{id: 1}}]" />
			</munit:set-event>
			<try doc:name="Try" doc:id="5bddb3f1-c333-4242-8350-0c339887cbac" >
				<flow-ref doc:name="Flow-ref to mainflow" doc:id="1999c66e-9297-4ec5-a46d-783d70579186" name="mainflow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="56655110-43ac-482b-8663-633c9a9b5d18" >
						<logger level="INFO" doc:name="Logger" doc:id="094820a8-eff4-4609-974d-cd0554d071d9" message="inside on error continue"/>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="a3b848b0-886d-4238-b36a-908fedf3d394" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must equalTo({
	status: 500,
	message: "internal server error"
})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
